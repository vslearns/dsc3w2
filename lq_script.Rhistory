install.packages("RMySQL")
install.packages("RMySQL")
library(RMySQL)
uscsDb <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb, "show databases;");
result <- dbGetQuery(uscsDb, "show databases;");
resul
result
dbDisconnect(uscsDb)
hg19 <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu", db="hg19")
length(dbListTables(hg19))
tables <- dbListTables(hg19)
tables[1:5]
dbDisconnect(hg19)
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
created = h5createFile("example.h5")
created
created = h5createGroup("example.h5", "foo")
created = h5createGroup("example.h5", "baa")
created = h5createGroup("example.h5", "foo/foobaa")
h5ls("example.h5")
h5ls("example.h5")
library(datasets)
airquality
h5.write(airquality, "example.h5", "aq")
h5write(airquality, "example.h5", "aq")
h5ls("example.h5")
readaq = h5read("example.h5", "aq")
readaq
data = GET("https://api.data.gov/ed/collegescorecard/v1/schools?api_key=<omitted>&fields=id,school.name,school.city,school.state,school.zip,school.school_url,school.price_calculator_url,school.ownership,school.carnegie_basic,school.carnegie_undergrad,school.carnegie_size_setting,school.religious_affiliation,2015.admissions.admission_rate.overall,2015.admissions.sat_scores.average.overall,2015.admissions.act_scores.midpoint.cumulative,2015.student.size,2015.cost.attendance.academic_year,2015.cost.tuition.in_state,2015.cost.tuition.out_of_state,2015.aid.pell_grant_rate,2015.repayment.7_yr_repayment.completers_rate,2015.repayment.7_yr_repayment.noncompleters_rate,2015.student.share_highincome.110001plus,2015.student.share_highincome.75001_110000,2015.student.share_middleincome.48001_75000,2015.student.share_middleincome.30001_48000,2015.student.share_lowincome.0_30000,2015.aid.loan_principal,2015.aid.median_debt.completers.overall,2015.aid.median_debt.noncompleters,2015.student.demographics.age_entry,2015.student.demographics.avg_family_income,2015.student.demographics.median_family_income,2015.student.demographics.poverty_rate,school.institutional_characteristics.level,2015.student.demographics.women,2015.student.demographics.men,school.alias&school.name=Stanford")
library(httr)
install.packages("httr")
library(httr)
data = GET("https://api.data.gov/ed/collegescorecard/v1/schools?api_key=<omitted>&fields=id,school.name,school.city,school.state,school.zip,school.school_url,school.price_calculator_url,school.ownership,school.carnegie_basic,school.carnegie_undergrad,school.carnegie_size_setting,school.religious_affiliation,2015.admissions.admission_rate.overall,2015.admissions.sat_scores.average.overall,2015.admissions.act_scores.midpoint.cumulative,2015.student.size,2015.cost.attendance.academic_year,2015.cost.tuition.in_state,2015.cost.tuition.out_of_state,2015.aid.pell_grant_rate,2015.repayment.7_yr_repayment.completers_rate,2015.repayment.7_yr_repayment.noncompleters_rate,2015.student.share_highincome.110001plus,2015.student.share_highincome.75001_110000,2015.student.share_middleincome.48001_75000,2015.student.share_middleincome.30001_48000,2015.student.share_lowincome.0_30000,2015.aid.loan_principal,2015.aid.median_debt.completers.overall,2015.aid.median_debt.noncompleters,2015.student.demographics.age_entry,2015.student.demographics.avg_family_income,2015.student.demographics.median_family_income,2015.student.demographics.poverty_rate,school.institutional_characteristics.level,2015.student.demographics.women,2015.student.demographics.men,school.alias&school.name=Stanford")
df = jsonlite::fromJSON(toJSON(content(data)))
library(jsonlite)
df = jsonlite::fromJSON(toJSON(content(data)))
df
df$id
df$school.name
df$results
df <- df$results
df$id
df$school.name
df$school.alias
myapp <- oauth_app("github",
key = "<omitted>",
secret = "<omitted>")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
repos <- GET("https://api.github.com/users/jtleek/repos", gtoken)
repos
repos <- GET("https://api.github.com/users/jtleek/repos?access_token=<omitted>")
rpos
repos
df = jsonlite::fromJSON(toJSON(content(repos)))
df
names(repos)
names(repos$content)
names(repos$headers)
names(repos$request)
names(repos$request$output)
names(repos)
names(df)
df$created_at[df$name == "datasharing"]
acs <- read.csv("acs.csv")
install.packages("sqldf")
library(sqldf)
sqldf("select pwgtp1 from acs where AGEP \lt< 50")
sqldf("select pwgtp1 from acs where AGEP < 50")
library(XML)
xml <- xmlParse("http://biostat.jhsph.edu/~jleek/contact.html")
xml
xmldoc <- xmlParse("http://biostat.jhsph.edu/~jleek/contact.html")
xmldoc
page <- readLines("http://biostat.jhsph.edu/~jleek/contact.html")
nchar(page[10])
nchar(page[20])
nchar(page[30])
nchar(page[100])
fwff <- read.fwf("fwff.for", 4)
fwff
fwff <- read.fwf("fwff.for", 4, header=TRUE)
fwff
fwff <- read.fwf("fwff.for", 4, skip=4)
fwff
fwff <- read.fwf("fwff.for", c(9, 4, 4, 4, 4, 4, 4, 4, 4, 4), skip=4)
fwff
fwff <- read.fwf("fwff.for", c(10, 4, 4, 4, 4, 4, 4, 4, 4, 4), skip=4)
fwff
fwff <- read.fwf("fwff.for", c(10, 5, 4, 4, 4, 4, 4, 4, 4, 4), skip=4)
fwff
fwff <- read.fwf("fwff.for", c(10, 5, 4, 4, 5, 4, 4, 4, 4, 4), skip=4)
fwff
fwff <- read.fwf("fwff.for", c(10, 5, 4, 4, 5, 4, 4, 5, 4, 4), skip=4)
fwff
fwff[6]
fwff
fwff[6]
fwff
head(fwff[6], 100)
fwff[6]
sum(fwff[6])
